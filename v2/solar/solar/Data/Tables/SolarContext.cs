// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.AspNetCore.Components.Web;
using System.Linq;



#nullable disable

namespace solar.Data.Tables
{
    public partial class SolarContext : DbContext
    {
        public SolarContext()
        {
        }

        public SolarContext(DbContextOptions<SolarContext> options)
            : base(options)
        {
        }

        public virtual DbSet<alerta> alerta { get; set; }
        public virtual DbSet<alertasutilizador> alertasutilizador { get; set; }
        public virtual DbSet<avaria> avaria { get; set; }
        public virtual DbSet<consumoenergetico> consumoenergetico { get; set; }
        public virtual DbSet<evento> evento { get; set; }
        public virtual DbSet<funcionario> funcionario { get; set; }
        public virtual DbSet<habitacao> habitacao { get; set; }
        public virtual DbSet<lembrete> lembrete { get; set; }
        public virtual DbSet<localidade> localidade { get; set; }
        public virtual DbSet<manutencao> manutencao { get; set; }
        public virtual DbSet<meteorologia> meteorologia { get; set; }
        public virtual DbSet<painel> painel { get; set; }
        public virtual DbSet<producaoenergetica> producaoenergetica { get; set; }
        public virtual DbSet<utilizador> utilizador { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<alerta>(entity =>
            {
                entity.HasKey(e => e.idAlerta)
                    .HasName("PK_alerta_idAlerta");

                entity.ToTable("alerta", "solar");

                entity.Property(e => e.idAlerta).ValueGeneratedNever();

                entity.Property(e => e.dataHora);

                entity.Property(e => e.descricao).IsRequired();

                entity.Property(e => e.sugestoes).IsRequired();
            });

            modelBuilder.Entity<alertasutilizador>(entity =>
            {
                entity.HasKey(e => new { e.Utilizador_username, e.Tipo })
                    .HasName("PK_alertasutilizador_Utilizador_username");

                entity.ToTable("alertasutilizador", "solar");

                entity.Property(e => e.Utilizador_username).HasMaxLength(45);

                entity.HasOne(d => d.Utilizador_usernameNavigation)
                    .WithMany(p => p.alertasutilizador)
                    .HasForeignKey(d => d.Utilizador_username)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("alertasutilizador$fk_table1_Utilizador2");
            });

            modelBuilder.Entity<avaria>(entity =>
            {
                entity.HasKey(e => e.dataHora)
                    .HasName("PK_avaria_dataHora");

                entity.ToTable("avaria", "solar");

                entity.HasIndex(e => e.Habitacao_idHabitacao);

                entity.Property(e => e.dataHora);

                entity.HasOne(d => d.Habitacao_idHabitacaoNavigation)
                    .WithMany(p => p.avaria)
                    .HasForeignKey(d => d.Habitacao_idHabitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("avaria$fk_Avaria_Habitacao1");
            });

            modelBuilder.Entity<consumoenergetico>(entity =>
            {
                entity.HasKey(e => new { e.data, e.Habitacao_idHabitacao })
                    .HasName("PK_consumoenergetico_data");

                entity.ToTable("consumoenergetico", "solar");

                entity.HasIndex(e => e.Habitacao_idHabitacao);

                entity.Property(e => e.data).HasColumnType("date");

                entity.HasOne(d => d.Habitacao_idHabitacaoNavigation)
                    .WithMany(p => p.consumoenergetico)
                    .HasForeignKey(d => d.Habitacao_idHabitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("consumoenergetico$fk_ConsumoEnergetico_Habitacao1");
            });

            modelBuilder.Entity<evento>(entity =>
            {
                entity.HasKey(e => e.idEvento)
                    .HasName("PK_evento_idEvento");

                entity.ToTable("evento", "solar");

                entity.Property(e => e.idEvento).ValueGeneratedNever();

                entity.Property(e => e.data);

                entity.Property(e => e.dataFinal);

                entity.Property(e => e.descricao).IsRequired();
            });

            modelBuilder.Entity<funcionario>(entity =>
            {
                entity.HasKey(e => e.Utilizador_username)
                    .HasName("PK_funcionario_Utilizador_username");

                entity.ToTable("funcionario", "solar");

                entity.Property(e => e.Utilizador_username).HasMaxLength(45);

                entity.HasOne(d => d.Utilizador_usernameNavigation)
                    .WithOne(p => p.funcionario)
                    .HasForeignKey<funcionario>(d => d.Utilizador_username)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("funcionario$fk_table1_Utilizador1");
            });

            modelBuilder.Entity<habitacao>(entity =>
            {
                entity.HasKey(e => e.idHabitacao)
                    .HasName("PK_habitacao_idHabitacao");

                entity.ToTable("habitacao", "solar");

                entity.HasIndex(e => e.Localidade_idLocalidade);

                entity.HasIndex(e => e.Utilizador_username);

                entity.Property(e => e.idHabitacao).ValueGeneratedNever();

                entity.Property(e => e.Utilizador_username)
                    .IsRequired()
                    .HasMaxLength(45);

                entity.Property(e => e.morada)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.Localidade_idLocalidadeNavigation)
                    .WithMany(p => p.habitacao)
                    .HasForeignKey(d => d.Localidade_idLocalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("habitacao$fk_Habitacao_Localidade1");

                entity.HasOne(d => d.Utilizador_usernameNavigation)
                    .WithMany(p => p.habitacao)
                    .HasForeignKey(d => d.Utilizador_username)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("habitacao$fk_Habitacao_Utilizador1");
            });

            modelBuilder.Entity<lembrete>(entity =>
            {
                entity.HasKey(e => e.idLembrete)
                    .HasName("PK_lembrete_idLembrete");

                entity.ToTable("lembrete", "solar");

                entity.HasIndex(e => e.Evento_idEvento);

                entity.HasIndex(e => e.Utilizador_username);

                entity.Property(e => e.idLembrete).ValueGeneratedNever();

                entity.Property(e => e.Utilizador_username)
                    .IsRequired()
                    .HasMaxLength(45);

                entity.Property(e => e.dataHora);

                entity.HasOne(d => d.Evento_idEventoNavigation)
                    .WithMany(p => p.lembrete)
                    .HasForeignKey(d => d.Evento_idEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("lembrete$fk_Lembrete_Evento1");

                entity.HasOne(d => d.Utilizador_usernameNavigation)
                    .WithMany(p => p.lembrete)
                    .HasForeignKey(d => d.Utilizador_username)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("lembrete$fk_Lembrete_Utilizador1");
            });

            modelBuilder.Entity<localidade>(entity =>
            {
                entity.HasKey(e => e.idLocalidade)
                    .HasName("PK_localidade_idLocalidade");

                entity.ToTable("localidade", "solar");

                entity.Property(e => e.idLocalidade).ValueGeneratedNever();

                entity.Property(e => e.Concelho)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Distrito)
                    .IsRequired()
                    .HasMaxLength(45);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<manutencao>(entity =>
            {
                entity.HasKey(e => e.Funcionario_username)
                    .HasName("PK_manutencao_Funcionario_username");

                entity.ToTable("manutencao", "solar");

                object p = entity.HasIndex(e => e.Habitacao_idHabitacao);

                entity.Property(e => e.Funcionario_username).HasMaxLength(45);

                entity.Property(e => e.data);

                entity.HasOne(d => d.Funcionario_usernameNavigation)
                    .WithOne(p => p.manutencao)
                    .HasForeignKey<manutencao>(d => d.Funcionario_username)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("manutencao$fk_Manutencao_Funcionario1");

                entity.HasOne(d => d.Habitacao_idHabitacaoNavigation)
                    .WithMany(p => p.manutencao)
                    .HasForeignKey(d => d.Habitacao_idHabitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("manutencao$fk_Manutencao_Habitacao1");
            });

            modelBuilder.Entity<meteorologia>(entity =>
            {
                entity.HasKey(e => new { e.data, e.idLocalidade })
                    .HasName("PK_meteorologia_data");

                entity.ToTable("meteorologia", "solar");

                entity.HasIndex(e => e.idLocalidade);

                entity.Property(e => e.data).HasColumnType("date");

                entity.Property(e => e.skyCondition)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.weatherType)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.HasOne(d => d.idLocalidadeNavigation)
                    .WithMany(p => p.meteorologia)
                    .HasForeignKey(d => d.idLocalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("meteorologia$fk_Meteorologia_Localidade");
            });

            modelBuilder.Entity<painel>(entity =>
            {
                entity.HasKey(e => new { e.idPainel, e.Habitacao_idHabitacao })
                    .HasName("PK_painel_idPainel");

                entity.ToTable("painel", "solar");

                entity.HasIndex(e => e.Habitacao_idHabitacao);

                entity.Property(e => e.modelo)
                    .IsRequired()
                    .HasMaxLength(45);

                entity.HasOne(d => d.Habitacao_idHabitacaoNavigation)
                    .WithMany(p => p.painel)
                    .HasForeignKey(d => d.Habitacao_idHabitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("painel$fk_Painel_Habitacao1");
            });

            modelBuilder.Entity<producaoenergetica>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.Painel_idPainel, e.Painel_Habitacao_idHabitacao })
                    .HasName("PK_producaoenergetica_ID");

                entity.ToTable("producaoenergetica", "solar");

                entity.HasIndex(e => new { e.Painel_idPainel, e.Painel_Habitacao_idHabitacao });

                entity.Property(e => e.data).HasColumnType("date");

                entity.HasOne(d => d.Painel_)
                    .WithMany(p => p.producaoenergetica)
                    .HasForeignKey(d => new { d.Painel_idPainel, d.Painel_Habitacao_idHabitacao })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("producaoenergetica$fk_ProducaoEnergetica_Painel1");
            });

            modelBuilder.Entity<utilizador>(entity =>
            {
                entity.HasKey(e => e.username)
                    .HasName("PK_utilizador_username");

                entity.ToTable("utilizador", "solar");

                entity.Property(e => e.username).HasMaxLength(45);

                entity.Property(e => e.email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.lastTimeOnline);

                entity.Property(e => e.nome)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.password)
                    .IsRequired()
                    .HasMaxLength(45);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}